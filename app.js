const { ipcRenderer } = require('electron');

class TodoManager {
  constructor() {
    this.editingLi = null;
    this.todoList = document.getElementById('todo_list');
    this.doneList = document.getElementById('done_list');
    this.todoDate = document.getElementById('todo_date');
    this.todoText = document.getElementById('todo_txt');
    this.registerBtn = document.querySelector('.btn_register');
    
    this.init();
  }

  init() {
    this.setTodayDate();
    this.bindEvents();
    this.loadData();
  }

  setTodayDate() {
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    this.todoDate.value = dateString;
  }

  createTodoItem(date, text, id) {
    const li = document.createElement('li');
    li.dataset.id = id;
    li.innerHTML = `
      <input type="checkbox" id="todo${id}">
      <div class="todo_info">
        <label for="todo${id}">
          <span class="date">${date}</span>
          <p class="text">${text}</p>
        </label>
      </div>
      <div class="todo_actions">
        <button class="btn btn_edit" title="ÏàòÏ†ï">‚úèÔ∏è</button>
        <button class="btn btn_delete" title="ÏÇ≠Ï†ú">üóëÔ∏è</button>
      </div>
    `;
    return li;
  }

  async handleRegisterOrUpdate() {
    const date = this.todoDate.value;
    const text = this.todoText.value.trim();
    
    if (!date || !text) {
      alert("ÎÇ†ÏßúÏôÄ ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    if (this.editingLi) {
      this.updateExistingItem(this.editingLi, date, text);
      this.resetEditMode();
    } else {
      this.addNewItem(date, text);
    }

    this.todoText.value = '';
    await this.saveData();
  }

  updateExistingItem(li, date, text) {
    li.querySelector('.date').textContent = date;
    li.querySelector('.text').textContent = text;
  }

  addNewItem(date, text) {
    const id = Date.now().toString();
    const li = this.createTodoItem(date, text, id);
    this.todoList.appendChild(li);
  }

  resetEditMode() {
    this.editingLi = null;
    this.registerBtn.textContent = "Îì±Î°ù";
    this.registerBtn.classList.remove('editing');
  }

  async moveToDone() {
    const checkedItems = this.todoList.querySelectorAll('input:checked');
    
    checkedItems.forEach(checkbox => {
      const li = checkbox.closest('li');
      const clone = li.cloneNode(true);
      const cloneCheckbox = clone.querySelector('input');
      
      cloneCheckbox.checked = true;
      cloneCheckbox.disabled = true;
      
      // ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº Ï†úÍ±∞
      clone.querySelector('.todo_actions').style.display = 'none';
      
      this.doneList.appendChild(clone);
      li.remove();
    });

    await this.saveData();
  }

  async moveToTodo() {
    const checkedItems = this.doneList.querySelectorAll('input:checked');
    
    checkedItems.forEach(checkbox => {
      const li = checkbox.closest('li');
      const clone = li.cloneNode(true);
      const cloneCheckbox = clone.querySelector('input');
      
      cloneCheckbox.checked = false;
      cloneCheckbox.disabled = false;
      
      // ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº Îã§Ïãú ÌëúÏãú
      clone.querySelector('.todo_actions').style.display = 'flex';
      
      this.todoList.appendChild(clone);
      li.remove();
    });

    await this.saveData();
  }

  extractDataFromList(listElement) {
    return Array.from(listElement.children).map(li => ({
      id: li.dataset.id,
      date: li.querySelector('.date').textContent,
      text: li.querySelector('.text').textContent
    }));
  }

  async saveData() {
    try {
      const todoData = this.extractDataFromList(this.todoList);
      const doneData = this.extractDataFromList(this.doneList);
      
      const result = await ipcRenderer.invoke('save-data', {
        todo: todoData,
        done: doneData
      });

      if (!result.success) {
        console.error('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®:', result.error);
      }
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò:', error);
    }
  }

  async loadData() {
    try {
      const data = await ipcRenderer.invoke('load-data');
      
      this.todoList.innerHTML = '';
      this.doneList.innerHTML = '';

      data.todo.forEach(item => {
        const li = this.createTodoItem(item.date, item.text, item.id);
        this.todoList.appendChild(li);
      });

      data.done.forEach(item => {
        const li = this.createTodoItem(item.date, item.text, item.id);
        const checkbox = li.querySelector('input');
        checkbox.checked = true;
        checkbox.disabled = true;
        li.querySelector('.todo_actions').style.display = 'none';
        this.doneList.appendChild(li);
      });
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
    }
  }

  async exportData() {
    try {
      const todoData = this.extractDataFromList(this.todoList);
      const doneData = this.extractDataFromList(this.doneList);
      
      const result = await ipcRenderer.invoke('export-data', {
        todo: todoData,
        done: doneData
      });

      if (result.success && !result.canceled) {
        alert(`Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Ï°åÏäµÎãàÎã§.\nÍ≤ΩÎ°ú: ${result.path}`);
      } else if (result.error) {
        alert(`ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®: ${result.error}`);
      }
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïò§Î•ò:', error);
      alert('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }

  async importData() {
    try {
      const result = await ipcRenderer.invoke('import-data');

      if (result.success && result.data) {
        this.todoList.innerHTML = '';
        this.doneList.innerHTML = '';

        result.data.todo.forEach(item => {
          const li = this.createTodoItem(item.date, item.text, item.id);
          this.todoList.appendChild(li);
        });

        result.data.done.forEach(item => {
          const li = this.createTodoItem(item.date, item.text, item.id);
          const checkbox = li.querySelector('input');
          checkbox.checked = true;
          checkbox.disabled = true;
          li.querySelector('.todo_actions').style.display = 'none';
          this.doneList.appendChild(li);
        });

        alert('Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏ÏôÄÏ°åÏäµÎãàÎã§.');
      } else if (result.error) {
        alert(`Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ${result.error}`);
      }
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
      alert('Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }

  handleEdit(li) {
    this.todoDate.value = li.querySelector('.date').textContent;
    this.todoText.value = li.querySelector('.text').textContent;
    this.editingLi = li;
    this.registerBtn.textContent = "ÏàòÏ†ï ÏôÑÎ£å";
    this.registerBtn.classList.add('editing');
    this.todoText.focus();
  }

  async handleDelete(li) {
    if (confirm('Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      li.remove();
      await this.saveData();
    }
  }

  bindEvents() {
    // Îì±Î°ù/ÏàòÏ†ï Î≤ÑÌäº
    this.registerBtn.addEventListener('click', () => this.handleRegisterOrUpdate());

    // Enter ÌÇ§Î°ú Îì±Î°ù
    this.todoText.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.handleRegisterOrUpdate();
      }
    });

    // ÏôÑÎ£å/ÎêòÎèåÎ¶¨Í∏∞ Î≤ÑÌäº
    document.getElementById('btn_done').addEventListener('click', () => this.moveToDone());
    document.getElementById('btn_todo').addEventListener('click', () => this.moveToTodo());

    // ÎÇ¥Î≥¥ÎÇ¥Í∏∞/Í∞ÄÏ†∏Ïò§Í∏∞ Î≤ÑÌäº
    document.querySelector('.btn_export').addEventListener('click', () => this.exportData());
    document.querySelector('.btn_import').addEventListener('click', () => this.importData());

    // Ïù¥Î≤§Ìä∏ ÏúÑÏûÑÏúºÎ°ú ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº Ï≤òÎ¶¨
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('btn_edit')) {
        const li = e.target.closest('li');
        this.handleEdit(li);
      }

      if (e.target.classList.contains('btn_delete')) {
        const li = e.target.closest('li');
        this.handleDelete(li);
      }
    });

    // ESC ÌÇ§Î°ú ÏàòÏ†ï Î™®Îìú Ï∑®ÏÜå
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.editingLi) {
        this.resetEditMode();
        this.todoText.value = '';
      }
    });
  }
}

// DOMÏù¥ Î°úÎìúÎêú ÌõÑ Ïã§Ìñâ
document.addEventListener('DOMContentLoaded', () => {
  new TodoManager();
});